export const axisOptions = [
    { start: "High Five", end: "Fist Bump" },
    { start: "Couch Potato", end: "Touches Grass" },
    { start: "Lights Candles", end: "Lights Bonfires" },
    { start: "Silent Sneezer", end: "Powerful Sneezer" },
    { start: "Napkin User", end: "Sleeve Wiper" },
    { start: "Shower Singer", end: "Shower Thinker" },
    { start: "Spider Saver", end: "Spider Squisher" },
    { start: "Movie Talker", end: "Shusher" },
    { start: "Sock Shoe Sock Shoe", end: "Sock Sock Shoe Shoe" },
    { start: "Bookworm", end: "Illiterate" },
    { start: "Sells feet pics", end: "Buys feet pics" },
    { start: "Predator", end: "Prey" },
    { start: "Sugar Baby", end: "Sugar Daddy" },
    { start: "Mountains", end: "Beach" },
    { start: "Early Bird", end: "The Worm" },
    { start: "Left on read", end: "Leaving Others On Read" },
    { start: "Toilet Paper Folder", end: "Toilet Paper Crumbler" },
    { start: "Window Seat", end: "Aisle Seat" },
    { start: "One Tab Open", end: "100 Tabs Open" },
    { start: "Instruction Reader", end: "Wings It" },
    { start: "Menu Studier", end: "Panic Orderer" },
    { start: "Punctual", end: "Fashionably Late" },
    { start: "Single Alarm", end: "Snooze Abuser" },
    { start: "Screenager", end: "Digital Detox" },
    { start: "Cereal First", end: "Milk First" },
    { start: "Boundary Setter", end: "Pushover" },
    { start: "Conflict Avoidant", end: "Conflict Causer" },
    { start: "Review Reader", end: "Impulse Buyer" },
    { start: "Full Tank", end: "Rides on Empty" },
    { start: "Matching Sock Seeker", end: "Any Two Will Do" },
    { start: "Hard G in GIF", end: "Soft G in GIF" },
    { start: "Tea Spiller", end: "Tea Drinker" },
    { start: "Slow Eater", end: "Speed Inhaler" },
    { start: "Fork and Knife Pizza", end: "Folded Slice" },
    { start: "Umbrella Owner", end: "Soaked And Unprepared" },
    { start: "Subtitles On", end: "Subtitles Off" },
    { start: "Socks in Bed", end: "Barefoot Sleeper" },
    { start: "Minimalist", end: "Maximalist" },
    { start: "QWERTY Expert", end: "Touch Typer" },
    { start: "Four Suitcases", end: "Just A Backpack" },
    { start: "Front Row Sitter", end: "Back Row Hider" },
    { start: "Tailgater", end: "Defensive Driver" },
    { start: "Installs Updates", end: "'Remind Me Later'" },
    { start: "Asks for Directions", end: "Drives in Circles" },
    { start: "Natural Navigator", end: "Makes L with Fingers" },
    { start: "Hairless", end: "Hairy" },
    { start: "Hero", end: "Villain" },
    { start: "Inflexible", end: "Flexible" },
    { start: "Risk Averse", end: "Adrenaline Junkie" },
    { start: "Dog Person", end: "Cat Person" },
    { start: "Mint Chip", end: "Cookie Dough" },
    { start: "Serial Procrastinator", end: "Planner" },
    { start: "Toilet Paper Over", end: "Toilet Paper Under" },
    { start: "Playlist Curator", end: "Just Presses Shuffle" },
    { start: "Movie Crier", end: "Emotional Fortress" },
    { start: "Inbox Zero", end: "10,000 Unread Emails" },
    { start: "Birthday Rememberer", end: "Facebook Birthday Reliant" },
    { start: "Runway Model", end: "Gets Dressed In The Dark" },
    { start: "Washes Pants After 1 Wear", end: "Washes Pants After 4 Wears" },
    { start: "Separates Laundry By Color", end: "Everything In One Load" },
    { start: "Orders Water", end: "Orders Shirley Temple" },
    { start: "Would Fight A Goose", end: "Would Befriend A Goose" },
    { start: "Eats Kiwi With The Skin", end: "Meticulously Peels Kiwi" },
    { start: "Enters Pool Slowly", end: "Dives In The Deep End" },
    { start: "Collects Hotel Soaps", end: "Brings Own Toiletries" },
    { start: "Befriends Neighborhood Squirrels", end: "Has Squirrel Nemesis" },
    { start: "Doomsday Prepper", end: "Lives In The Moment" },
    { start: "Memorized Pi To 100 Digits", end: "Thinks Pi â‰ˆ 3" },
    { start: "Takes Scenic Route", end: "Takes Fastest Route" },
    { start: "Wants To Be Cryogenically Frozen", end: "Wants Natural Burial" },
    { start: "Has A Favorite Font", end: "Uses Arial" },
    { start: "We Live In A Simulation", end: "We Are The Center Of The Universe" },
    { start: "AI Is Overhyped", end: "AI Is The Future" },
    { start: "Amish", end: "Scientologist" },
    { start: "Driver", end: "Passenger Princess" },
    { start: "Warm Hugger", end: "Side Hugger" },
    { start: "Guards Fries", end: "Shares Fries" },
    { start: "Picture Taker", end: "Memory Maker" },
    { start: "Air Drummer", end: "Head Bobber" },
    { start: "Moon Howler", end: "Star Gazer" },
    { start: "Beach Lounger", end: "Ocean Swimmer" },
    { start: "Stealth Fart", end: "Loud And Proud" },
    { start: "Bubble Popper", end: "Bubble Blower" },
    { start: "Jacket In Summer", end: "Shorts In Winter" },
    { start: "Buys Extended Warranty", end: "Lives Dangerously" },
    { start: "Pineapple Pizza Lover", end: "Pizza Purist" },
    { start: "Sushi With Chopsticks", end: "Sushi With Fork" },
    { start: "Sunrise", end: "Sunset" },
    { start: "Karma Believer", end: "Coincidence Observer" },
    { start: "Public Restroom Hoverer", end: "Sits Right Down" },
    { start: "Would Clone Self", end: "Fears Clone Army" },
    { start: "Overshares", end: "Emotionally Unavailable" },
    { start: "Saves For Retirement", end: "Lives For Today" },
    { start: "Actions Reveal Character", end: "Words Define Us" },
    { start: "Money Can't Buy Happiness", end: "Money Can Buy Happiness" },
    { start: "Success Requires Sacrifice", end: "Balance Is Success" },
    { start: "Tells White Lies", end: "Brutal Honesty Always" },
    { start: "Health Is Wealth", end: "Wealth Is Wealth" },
    { start: "Would Choose Knowledge", end: "Would Choose Happiness" },
    { start: "Power Walker", end: "Stroller" }
  ];
  
  export const playerColors = [
    '#db5461',
    '#3891a6',
    '#fdc30f',
    '#a6d3a0',
    '#4c2c69',
    '#e898a0',
    '#65b1c2',
    '#feec7f',
    '#c0e2bc'
  ];
  
  // Helper to determine text color based on background brightness
  export const getContrastYIQ = (hexcolor) => {
    if (hexcolor.charAt(0) === '#') hexcolor = hexcolor.substr(1);
    const r = parseInt(hexcolor.substr(0, 2), 16);
    const g = parseInt(hexcolor.substr(2, 2), 16);
    const b = parseInt(hexcolor.substr(4, 2), 16);
    return ((r * 299) + (g * 587) + (b * 114)) / 1000;
  };
  
  // Calculate distance between two points
  export const calculateDistance = (a, b) => {
    const dx = a.x - b.x;
    const dy = a.y - b.y;
    return Math.sqrt(dx * dx + dy * dy);
  };